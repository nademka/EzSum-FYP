{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projex\\\\Summary FYP\\\\Frontend\\\\my-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport SummaryDisplay from './components/SummaryDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [neuroType, setNeuroType] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [summary, setSummary] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // To handle loading state\n\n  useEffect(() => {\n    if (!userInput || !neuroType) {\n      setSummary('');\n      return;\n    }\n    fetchSummaryBasedOnType();\n  }, [userInput, neuroType]);\n  const fetchSummaryBasedOnType = async () => {\n    setIsLoading(true); // Start loading\n    try {\n      const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch');\n      const data = await response.json();\n      setSummary(data.summary);\n    } catch (error) {\n      console.error('Error fetching summary based on type:', error);\n      // Optionally set an error state and display it to the user\n    } finally {\n      setIsLoading(false); // Ensure loading is turned off after operation\n    }\n  };\n  const fetchGeneralSummary = async () => {\n    setIsLoading(true); // Start loading\n    try {\n      const response = await fetch('http://localhost:8000/summarize/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch');\n      const data = await response.json();\n      setSummary(data.summary);\n    } catch (error) {\n      console.error('Error fetching general summary:', error);\n      // Optionally set an error state and display it to the user\n    } finally {\n      setIsLoading(false); // Ensure loading is turned off after operation\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-blue-500\",\n        children: \"Hello World\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.tsx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 26\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-bold\",\n        children: \"Neurodivergence Input Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NeuroTypeDropdown, {\n        onChange: e => setNeuroType(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading summary...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(SummaryDisplay, {\n        summary: summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 58\n      }, this), !userInput || !neuroType ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please select a type and enter some text to see the summary.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 45\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchGeneralSummary,\n        children: \"Fetch General Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"W7XsNoSk9BK+eZkX+KDVFloSJaU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","NeuroTypeDropdown","UserInput","SummaryDisplay","jsxDEV","_jsxDEV","App","_s","neuroType","setNeuroType","userInput","setUserInput","summary","setSummary","isLoading","setIsLoading","fetchSummaryBasedOnType","response","fetch","toLowerCase","method","headers","body","JSON","stringify","text","ok","Error","data","json","error","console","fetchGeneralSummary","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","onChange","e","value","onClick","_c","$RefreshReg$"],"sources":["D:/Work/Projex/Summary FYP/Frontend/my-app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport SummaryDisplay from './components/SummaryDisplay';\n\nconst App: React.FC = () => {\n    const [neuroType, setNeuroType] = useState('');\n    const [userInput, setUserInput] = useState('');\n    const [summary, setSummary] = useState('');\n    const [isLoading, setIsLoading] = useState(false); // To handle loading state\n\n    useEffect(() => {\n        if (!userInput || !neuroType) {\n            setSummary('');\n            return;\n        }\n        fetchSummaryBasedOnType();\n    }, [userInput, neuroType]);\n\n    const fetchSummaryBasedOnType = async () => {\n        setIsLoading(true); // Start loading\n        try {\n            const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ text: userInput })\n            });\n            if (!response.ok) throw new Error('Failed to fetch');\n            const data = await response.json();\n            setSummary(data.summary);\n        } catch (error) {\n            console.error('Error fetching summary based on type:', error);\n            // Optionally set an error state and display it to the user\n        } finally {\n            setIsLoading(false); // Ensure loading is turned off after operation\n        }\n    };\n\n    const fetchGeneralSummary = async () => {\n        setIsLoading(true); // Start loading\n        try {\n            const response = await fetch('http://localhost:8000/summarize/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ text: userInput })\n            });\n            if (!response.ok) throw new Error('Failed to fetch');\n            const data = await response.json();\n            setSummary(data.summary);\n        } catch (error) {\n            console.error('Error fetching general summary:', error);\n            // Optionally set an error state and display it to the user\n        } finally {\n            setIsLoading(false); // Ensure loading is turned off after operation\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1 className=\"text-2xl font-bold text-blue-500\">Hello World</h1>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    Learn React\n                </a>\n            </header>\n            <div className=\"p-4\">\n                <h2 className=\"text-lg font-bold\">Neurodivergence Input Form</h2>\n                <NeuroTypeDropdown onChange={(e) => setNeuroType(e.target.value)} />\n                <UserInput value={userInput} onChange={(e) => setUserInput(e.target.value)} />\n                {isLoading ? <p>Loading summary...</p> : <SummaryDisplay summary={summary} />}\n                {!userInput || !neuroType ? <p>Please select a type and enter some text to see the summary.</p> : null}\n                <button onClick={fetchGeneralSummary}>Fetch General Summary</button>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}