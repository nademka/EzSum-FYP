{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projex\\\\Summary FYP\\\\Frontend\\\\my-app\\\\src\\\\InputForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputForm = ({\n  neuroType,\n  setUserInput,\n  setNeuroType,\n  fetchSummary\n}) => {\n  _s();\n  // This assumes that UserInput is for entering text that will be summarized.\n  // If so, you should have a state here for handling this user input.\n  const [inputText, setInputText] = useState(''); // Added state for user input text.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NeuroTypeDropdown, {\n      onChange: e => setNeuroType(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      value: inputText,\n      onChange: e => setInputText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchSummary,\n      children: \"Fetch General Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(InputForm, \"wAh2Cv8Kk70PfbjrJimBRYwxb6g=\");\n_c = InputForm;\nexport default InputForm;\nvar _c;\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["React","useState","NeuroTypeDropdown","UserInput","jsxDEV","_jsxDEV","InputForm","neuroType","setUserInput","setNeuroType","fetchSummary","_s","inputText","setInputText","children","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Work/Projex/Summary FYP/Frontend/my-app/src/InputForm.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\r\nimport UserInput from './components/UserInput';\r\n\r\ninterface InputFormProps {\r\n  neuroType: string;\r\n  setUserInput: React.Dispatch<React.SetStateAction<string>>;\r\n  setNeuroType: React.Dispatch<React.SetStateAction<string>>;\r\n  fetchSummary: () => Promise<void>;\r\n}\r\n\r\nconst InputForm: React.FC<InputFormProps> = ({ neuroType, setUserInput, setNeuroType, fetchSummary }) => {\r\n  // This assumes that UserInput is for entering text that will be summarized.\r\n  // If so, you should have a state here for handling this user input.\r\n  const [inputText, setInputText] = useState(''); // Added state for user input text.\r\n\r\n  return (\r\n    <div>\r\n      <NeuroTypeDropdown onChange={e => setNeuroType(e.target.value)} />\r\n      <UserInput value={inputText} onChange={e => setInputText(e.target.value)} /> {/* Adjusted to use the new state */}\r\n      <button onClick={fetchSummary}>Fetch General Summary</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS/C,MAAMC,SAAmC,GAAGA,CAAC;EAAEC,SAAS;EAAEC,YAAY;EAAEC,YAAY;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACvG;EACA;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEhD,oBACEI,OAAA;IAAAS,QAAA,gBACET,OAAA,CAACH,iBAAiB;MAACa,QAAQ,EAAEC,CAAC,IAAIP,YAAY,CAACO,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClEjB,OAAA,CAACF,SAAS;MAACe,KAAK,EAAEN,SAAU;MAACG,QAAQ,EAAEC,CAAC,IAAIH,YAAY,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eAC7EjB,OAAA;MAAQkB,OAAO,EAAEb,YAAa;MAAAI,QAAA,EAAC;IAAqB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAACX,EAAA,CAZIL,SAAmC;AAAAkB,EAAA,GAAnClB,SAAmC;AAczC,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}