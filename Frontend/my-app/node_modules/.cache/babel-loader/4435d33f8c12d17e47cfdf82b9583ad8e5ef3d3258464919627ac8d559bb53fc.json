{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projex\\\\Summary FYP\\\\Frontend\\\\my-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [neuroType, setNeuroType] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [summary, setSummary] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (userInput.trim() && neuroType.trim()) {\n      fetchSummaryBasedOnType();\n    }\n  }, [userInput, neuroType]);\n  const fetchSummaryBasedOnType = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch');\n      const data = await response.json();\n      setSummary(data.summary);\n    } catch (error) {\n      console.error('Error fetching summary based on type:', error);\n      setSummary('Failed to fetch summary. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: EzSumLogo,\n        alt: \"EZ Sum Logo\",\n        className: \"App-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"EZ Sum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NeuroTypeDropdown, {\n          onChange: e => setNeuroType(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n          value: userInput,\n          onChange: e => setUserInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading summary...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(SummaryDisplay, {\n          summary: summary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 62\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"W7XsNoSk9BK+eZkX+KDVFloSJaU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","neuroType","setNeuroType","useState","userInput","setUserInput","summary","setSummary","isLoading","setIsLoading","useEffect","trim","fetchSummaryBasedOnType","response","fetch","toLowerCase","method","headers","body","JSON","stringify","text","ok","Error","data","json","error","console","_jsxDEV","className","children","src","EzSumLogo","alt","fileName","_jsxFileName","lineNumber","columnNumber","NeuroTypeDropdown","onChange","e","target","value","UserInput","SummaryDisplay","_c","$RefreshReg$"],"sources":["D:/Work/Projex/Summary FYP/Frontend/my-app/src/App.tsx"],"sourcesContent":["const App = () => {\n    const [neuroType, setNeuroType] = useState('');\n    const [userInput, setUserInput] = useState('');\n    const [summary, setSummary] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        if (userInput.trim() && neuroType.trim()) {\n            fetchSummaryBasedOnType();\n        }\n    }, [userInput, neuroType]);\n\n    const fetchSummaryBasedOnType = async () => {\n        setIsLoading(true);\n        try {\n            const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ text: userInput })\n            });\n            if (!response.ok) throw new Error('Failed to fetch');\n            const data = await response.json();\n            setSummary(data.summary);\n        } catch (error) {\n            console.error('Error fetching summary based on type:', error);\n            setSummary('Failed to fetch summary. Please try again.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={EzSumLogo} alt=\"EZ Sum Logo\" className=\"App-logo\" />\n                <h1>EZ Sum</h1>\n            </header>\n            <div className=\"content\">\n                <div className=\"input-area\">\n                    <h2>Input</h2>\n                    <NeuroTypeDropdown onChange={e => setNeuroType(e.target.value)} />\n                    <UserInput value={userInput} onChange={e => setUserInput(e.target.value)} />\n                </div>\n                <div className=\"output-area\">\n                    <h2>Output</h2>\n                    {isLoading ? <p>Loading summary...</p> : <SummaryDisplay summary={summary} />}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}