{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projex\\\\Summary FYP\\\\Frontend\\\\my-app\\\\src\\\\components\\\\UserInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css'; // Ensure this path is correct as per your project structure\nimport EzSumLogo from './Ez_Sum.svg'; // Ensure this path is correct as per your project structure\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport SummaryDisplay from './components/SummaryDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [neuroType, setNeuroType] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [summary, setSummary] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [speaking, setSpeaking] = useState(false);\n\n  // Encapsulate API call logic in useCallback to ensure it does not trigger unnecessarily\n  const fetchSummaryBasedOnType = useCallback(async () => {\n    setIsLoading(true);\n    const formattedNeuroType = neuroType.toLowerCase().replace('_', '-');\n    try {\n      const response = await fetch(`http://localhost:8000/summarize/${formattedNeuroType}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch');\n      const data = await response.json();\n      setSummary(data.summary);\n    } catch (error) {\n      console.error('Error fetching summary based on type:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [neuroType, userInput]);\n  useEffect(() => {\n    if (!userInput || !neuroType) {\n      setSummary('');\n      return;\n    }\n    fetchSummaryBasedOnType();\n  }, [userInput, neuroType, fetchSummaryBasedOnType]);\n  const fetchGeneralSummary = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/summarize/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch');\n      const data = await response.json();\n      setSummary(data.summary);\n    } catch (error) {\n      console.error('Error fetching general summary:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSpeakClick = () => {\n    const synth = window.speechSynthesis;\n    if (speaking) {\n      synth.cancel(); // Stop any ongoing speech\n    }\n    const utterance = new SpeechSynthesisUtterance(summary);\n    utterance.onstart = () => setSpeaking(true);\n    utterance.onend = () => setSpeaking(false);\n    synth.speak(utterance);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: EzSumLogo,\n        alt: \"EZ Sum Logo\",\n        className: \"App-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"EZ Sum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-bold\",\n        children: \"Neurodivergence Input Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NeuroTypeDropdown, {\n        onChange: e => setNeuroType(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading summary...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(SummaryDisplay, {\n        summary: summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 58\n      }, this), !userInput || !neuroType ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please select a type and enter some text to see the summary.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 45\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchGeneralSummary,\n        children: \"Fetch General Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSpeakClick,\n        children: speaking ? 'Restart Speaking' : 'Speak Summary'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"kTYKciNTALwPlUZUDVjAT+zEiic=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","EzSumLogo","NeuroTypeDropdown","UserInput","SummaryDisplay","jsxDEV","_jsxDEV","App","_s","neuroType","setNeuroType","userInput","setUserInput","summary","setSummary","isLoading","setIsLoading","speaking","setSpeaking","fetchSummaryBasedOnType","formattedNeuroType","toLowerCase","replace","response","fetch","method","headers","body","JSON","stringify","text","ok","Error","data","json","error","console","fetchGeneralSummary","handleSpeakClick","synth","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","onstart","onend","speak","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["D:/Work/Projex/Summary FYP/Frontend/my-app/src/components/UserInput.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './App.css';  // Ensure this path is correct as per your project structure\r\nimport EzSumLogo from './Ez_Sum.svg'; // Ensure this path is correct as per your project structure\r\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\r\nimport UserInput from './components/UserInput';\r\nimport SummaryDisplay from './components/SummaryDisplay';\r\n\r\nconst App: React.FC = () => {\r\n    const [neuroType, setNeuroType] = useState<string>('');\r\n    const [userInput, setUserInput] = useState<string>('');\r\n    const [summary, setSummary] = useState<string>('');\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [speaking, setSpeaking] = useState<boolean>(false);\r\n\r\n    // Encapsulate API call logic in useCallback to ensure it does not trigger unnecessarily\r\n    const fetchSummaryBasedOnType = useCallback(async () => {\r\n        setIsLoading(true);\r\n        const formattedNeuroType = neuroType.toLowerCase().replace('_', '-');\r\n        try {\r\n            const response = await fetch(`http://localhost:8000/summarize/${formattedNeuroType}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ text: userInput })\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Failed to fetch');\r\n            const data = await response.json();\r\n            setSummary(data.summary);\r\n        } catch (error) {\r\n            console.error('Error fetching summary based on type:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [neuroType, userInput]);\r\n\r\n    useEffect(() => {\r\n        if (!userInput || !neuroType) { \r\n            setSummary('');\r\n            return;\r\n        }\r\n        fetchSummaryBasedOnType();\r\n    }, [userInput, neuroType, fetchSummaryBasedOnType]);\r\n\r\n    const fetchGeneralSummary = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await fetch('http://localhost:8000/summarize/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ text: userInput })\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Failed to fetch');\r\n            const data = await response.json();\r\n            setSummary(data.summary);\r\n        } catch (error) {\r\n            console.error('Error fetching general summary:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleSpeakClick = () => {\r\n        const synth = window.speechSynthesis;\r\n        if (speaking) {\r\n            synth.cancel(); // Stop any ongoing speech\r\n        }\r\n\r\n        const utterance = new SpeechSynthesisUtterance(summary);\r\n        utterance.onstart = () => setSpeaking(true);\r\n        utterance.onend = () => setSpeaking(false);\r\n\r\n        synth.speak(utterance);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <img src={EzSumLogo} alt=\"EZ Sum Logo\" className=\"App-logo\" />\r\n                <h1>EZ Sum</h1>\r\n            </header>\r\n            <div className=\"p-4\">\r\n                <h2 className=\"text-lg font-bold\">Neurodivergence Input Form</h2>\r\n                <NeuroTypeDropdown onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNeuroType(e.target.value)} />\r\n                <UserInput value={userInput} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUserInput(e.target.value)} />\r\n                {isLoading ? <p>Loading summary...</p> : <SummaryDisplay summary={summary} />}\r\n                {!userInput || !neuroType ? <p>Please select a type and enter some text to see the summary.</p> : null}\r\n                <button onClick={fetchGeneralSummary}>Fetch General Summary</button>\r\n                <button onClick={handleSpeakClick}>{speaking ? 'Restart Speaking' : 'Speak Summary'}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}