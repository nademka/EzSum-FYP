{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projex\\\\Summary FYP\\\\Frontend\\\\my-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport SummaryDisplay from './components/SummaryDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [neuroType, setNeuroType] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [summary, setSummary] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // To handle loading state\n\n  useEffect(() => {\n    if (!userInput || !neuroType) {\n      setSummary('');\n      return;\n    }\n    setIsLoading(true); // Start loading\n\n    // This replaces the mock fetchSummary function with actual API call\n    const handleSummarization = async () => {\n      const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      const data = await response.json();\n      setSummary(data.summary);\n      setIsLoading(false); // End loading\n    };\n    handleSummarization();\n  }, [userInput, neuroType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-blue-500\",\n        children: \"Hello World\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.tsx\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 26\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-bold\",\n        children: \"Neurodivergence Input Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NeuroTypeDropdown, {\n        onChange: e => setNeuroType(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n        value: userInput,\n        onChange: e => setUserInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading summary...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(SummaryDisplay, {\n        summary: summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 58\n      }, this), !userInput || !neuroType ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please select a type and enter some text to see the summary.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 45\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"W7XsNoSk9BK+eZkX+KDVFloSJaU=\");\n_c = App;\nexport default App;\n\n/***import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport SummaryDisplay from './components/SummaryDisplay';\n\nconst App: React.FC = () => {\n    const [neuroType, setNeuroType] = useState('');\n    const [userInput, setUserInput] = useState('');\n    const [summary, setSummary] = useState('');\n    const [isLoading, setIsLoading] = useState(false); // To handle loading state\n\n    useEffect(() => {\n        if (!userInput || !neuroType) {\n            setSummary('');\n            return;\n        }\n        setIsLoading(true); // Start loading\n        const fetchSummary = async () => {\n            // Simulate a network request\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            setSummary(`Summary based on input: \"${userInput}\" and type: ${neuroType}`);\n            setIsLoading(false); // End loading\n        };\n\n        fetchSummary();\n    }, [userInput, neuroType]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1 className=\"text-2xl font-bold text-blue-500\">Hello World</h1>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n            <div className=\"p-4\">\n                <h2 className=\"text-lg font-bold\">Neurodivergence Input Form</h2>\n                <NeuroTypeDropdown onChange={(e) => setNeuroType(e.target.value)} />\n                <UserInput value={userInput} onChange={(e) => setUserInput(e.target.value)} />\n                {isLoading ? <p>Loading summary...</p> : <SummaryDisplay summary={summary} />}\n                {!userInput || !neuroType ? <p>Please select a type and enter some text to see the summary.</p> : null}\n            </div>\n        </div>\n    );\n};\n\nexport default App;***/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","logo","NeuroTypeDropdown","UserInput","SummaryDisplay","jsxDEV","_jsxDEV","App","_s","neuroType","setNeuroType","userInput","setUserInput","summary","setSummary","isLoading","setIsLoading","handleSummarization","response","fetch","toLowerCase","method","headers","body","JSON","stringify","text","data","json","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","onChange","e","value","_c","$RefreshReg$"],"sources":["D:/Work/Projex/Summary FYP/Frontend/my-app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport SummaryDisplay from './components/SummaryDisplay';\n\nconst App: React.FC = () => {\n    const [neuroType, setNeuroType] = useState('');\n    const [userInput, setUserInput] = useState('');\n    const [summary, setSummary] = useState('');\n    const [isLoading, setIsLoading] = useState(false); // To handle loading state\n\n    useEffect(() => {\n        if (!userInput || !neuroType) {\n            setSummary('');\n            return;\n        }\n        setIsLoading(true); // Start loading\n\n        // This replaces the mock fetchSummary function with actual API call\n        const handleSummarization = async () => {\n            const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ text: userInput })\n            });\n            const data = await response.json();\n            setSummary(data.summary);\n            setIsLoading(false); // End loading\n        };\n\n        handleSummarization();\n    }, [userInput, neuroType]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1 className=\"text-2xl font-bold text-blue-500\">Hello World</h1>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n            <div className=\"p-4\">\n                <h2 className=\"text-lg font-bold\">Neurodivergence Input Form</h2>\n                <NeuroTypeDropdown onChange={(e) => setNeuroType(e.target.value)} />\n                <UserInput value={userInput} onChange={(e) => setUserInput(e.target.value)} />\n                {isLoading ? <p>Loading summary...</p> : <SummaryDisplay summary={summary} />}\n                {!userInput || !neuroType ? <p>Please select a type and enter some text to see the summary.</p> : null}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n\n\n\n/***import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NeuroTypeDropdown from './components/NeuroTypeDropdown';\nimport UserInput from './components/UserInput';\nimport SummaryDisplay from './components/SummaryDisplay';\n\nconst App: React.FC = () => {\n    const [neuroType, setNeuroType] = useState('');\n    const [userInput, setUserInput] = useState('');\n    const [summary, setSummary] = useState('');\n    const [isLoading, setIsLoading] = useState(false); // To handle loading state\n\n    useEffect(() => {\n        if (!userInput || !neuroType) {\n            setSummary('');\n            return;\n        }\n        setIsLoading(true); // Start loading\n        const fetchSummary = async () => {\n            // Simulate a network request\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            setSummary(`Summary based on input: \"${userInput}\" and type: ${neuroType}`);\n            setIsLoading(false); // End loading\n        };\n\n        fetchSummary();\n    }, [userInput, neuroType]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1 className=\"text-2xl font-bold text-blue-500\">Hello World</h1>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n            <div className=\"p-4\">\n                <h2 className=\"text-lg font-bold\">Neurodivergence Input Form</h2>\n                <NeuroTypeDropdown onChange={(e) => setNeuroType(e.target.value)} />\n                <UserInput value={userInput} onChange={(e) => setUserInput(e.target.value)} />\n                {isLoading ? <p>Loading summary...</p> : <SummaryDisplay summary={summary} />}\n                {!userInput || !neuroType ? <p>Please select a type and enter some text to see the summary.</p> : null}\n            </div>\n        </div>\n    );\n};\n\nexport default App;***/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}