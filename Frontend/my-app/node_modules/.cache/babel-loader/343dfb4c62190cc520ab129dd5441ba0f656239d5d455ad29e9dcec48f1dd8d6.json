{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projex\\\\Summary FYP\\\\Frontend\\\\my-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport InputForm from './InputForm';\nimport SummaryDisplay from './SummaryDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [neuroType, setNeuroType] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [summary, setSummary] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!userInput || !neuroType) {\n      setSummary('');\n      return;\n    }\n    fetchSummaryBasedOnType();\n  }, [userInput, neuroType]);\n  const fetchSummaryBasedOnType = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: userInput\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch');\n      const data = await response.json();\n      setSummary(data.summary);\n    } catch (error) {\n      console.error('Error fetching summary based on type:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(InputForm, {\n        neuroType: neuroType,\n        setUserInput: setUserInput,\n        setNeuroType: setNeuroType,\n        fetchSummary: fetchSummaryBasedOnType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading summary...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(SummaryDisplay, {\n        summary: summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 58\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"W7XsNoSk9BK+eZkX+KDVFloSJaU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","InputForm","SummaryDisplay","jsxDEV","_jsxDEV","App","_s","neuroType","setNeuroType","userInput","setUserInput","summary","setSummary","isLoading","setIsLoading","fetchSummaryBasedOnType","response","fetch","toLowerCase","method","headers","body","JSON","stringify","text","ok","Error","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","fetchSummary","_c","$RefreshReg$"],"sources":["D:/Work/Projex/Summary FYP/Frontend/my-app/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport InputForm from './InputForm';\nimport SummaryDisplay from './SummaryDisplay';\n\nconst App = () => {\n    const [neuroType, setNeuroType] = useState('');\n    const [userInput, setUserInput] = useState('');\n    const [summary, setSummary] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        if (!userInput || !neuroType) {\n            setSummary('');\n            return;\n        }\n        fetchSummaryBasedOnType();\n    }, [userInput, neuroType]);\n\n    const fetchSummaryBasedOnType = async () => {\n        setIsLoading(true);\n        try {\n            const response = await fetch(`http://localhost:8000/summarize/${neuroType.toLowerCase()}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ text: userInput })\n            });\n            if (!response.ok) throw new Error('Failed to fetch');\n            const data = await response.json();\n            setSummary(data.summary);\n        } catch (error) {\n            console.error('Error fetching summary based on type:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <div className=\"main-content\">\n                <InputForm neuroType={neuroType} setUserInput={setUserInput} setNeuroType={setNeuroType} fetchSummary={fetchSummaryBasedOnType} />\n                {isLoading ? <p>Loading summary...</p> : <SummaryDisplay summary={summary} />}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}